__version__ = (1, 0,10 )
import os
import re
import asyncio
import contextlib
import sys
import psutil
import aiohttp
import random
import logging
import base64
import json
import urllib.parse
import time
import requests
import tls_client
import subprocess
import cloudscraper
from urllib.parse import unquote
from asyncio import sleep
from telethon import events, errors, functions, types
from telethon.errors import InviteHashExpiredError, FloodWaitError, ChatWriteForbiddenError, ChannelPrivateError, UserAlreadyParticipantError
from telethon.tl import functions as tl_functions
from telethon.tl.functions.account import (
    UpdateNotifySettingsRequest,
    UpdateProfileRequest,
    UpdateEmojiStatusRequest,
    SetPrivacyRequest,
)
from telethon.tl.functions.channels import (
    JoinChannelRequest,
    LeaveChannelRequest,
    GetParticipantRequest,
)
from telethon.tl.functions.messages import (
    ImportChatInviteRequest,
    StartBotRequest,
    RequestAppWebViewRequest,
    GetMessagesViewsRequest,
)
from telethon.tl.types import (
    Message,
    Channel,
    PeerUser,
    PeerChannel,
    InputNotifyPeer,
    InputPeerNotifySettings,
    DialogFilter,
    KeyboardButtonUrl,
    InputBotAppShortName,
    ChannelParticipantSelf,
    Chat
)
from telethon.tl.functions.photos import UploadProfilePhotoRequest

from hikka import loader, utils
logger = logging.getLogger(__name__)

ERROR_PREFIX = "<emoji document_id=5210952531676504517>‚ùå</emoji> <i>"
ERROR_SUFFIX = "</i>"

async def get_creation_date(tg_id: int) -> str:
    url = "https://restore-access.indream.app/regdate"
    headers = {
        "accept": "*/*",    
        "content-type": "application/x-www-form-urlencoded",
        "user-agent": "Nicegram/92 CFNetwork/1390 Darwin/22.0.0",
        "x-api-key": "e758fb28-79be-4d1c-af6b-066633ded128",
        "accept-language": "en-US,en;q=0.9",
    }
    data = {"telegramId": tg_id}
    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=data) as response:
            if response.status == 200:
                json_response = await response.json()
                return json_response["data"]["date"]
            else:
                return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"


class MinamotoSoftV2(loader.Module):
    """–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø–æ–¥–ø–∏—Å–æ–∫, —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö"""

    strings = {
        "name": "MinamotoSoftV2",
        "no_code": "–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
        "no_number": "–ù–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
        "sub_required": "–î–ª—è —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: https://t.me/clan_minamoto",
        "log_message": "<b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç</b> <code>{}</code>: <code>{}</code>",
        "delete_button": "–£–¥–∞–ª–∏—Ç—å",
        "ignore_button": "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å",
        "message_deleted": "–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.",
        "message_ignored": "–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ.",
        "api_key_missing": "üö´ API –∫–ª—é—á –¥–ª—è 2captcha –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!",
        "captcha_failed": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å –∫–∞–ø—á—É: {error}",
        "config_api_key": "API –∫–ª—é—á –æ—Ç 2captcha",
        "config_delay": "–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)",
    }

    CHANNEL_USERNAME = "clan_minamoto"
    
    CHANNELS = [  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –∞—Ç—Ä–∏–±—É—Ç
        "https://t.me/+_PKkaHQeAb85YWVi",
        "https://t.me/+XEiRNh1THi43ZjIy",
        "https://t.me/+E6AABTbNYdY2MmYy",
        "https://t.me/logscbs",
    ]

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "delay", 
                2, 
                "–ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥", 
                validator=loader.validators.Integer()
            ),
            loader.ConfigValue(
                "log_chat_username", 
                "@logscbs", 
                "Username –ª–æ–≥-—á–∞—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", 
                validator=loader.validators.String()
            ),
            loader.ConfigValue(
                "log_chat_id", 
                2450569271, 
                "ID —á–∞—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö", 
                validator=loader.validators.Integer()
            ),
            loader.ConfigValue(
                "success_log_chat_id", 
                2367713117, 
                "ID —á–∞—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤ –∫–æ–º–∞–Ω–¥", 
                validator=loader.validators.Integer()
            ),
            loader.ConfigValue(
                "log_success", 
                True, 
                "–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ GiveShare", 
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "logs_username", 
                "", 
                "@username –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤ (–µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–æ–≥–∏ GiveShare –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º, —É–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å 'me'; –±–µ–∑ @)", 
                validator=loader.validators.Hidden(loader.validators.String())
            ),
            loader.ConfigValue(
                "watcher_on", 
                True, 
                "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ç–æ—Ä–∞ (–≤–∫–ª—é—á–µ–Ω/–≤—ã–∫–ª—é—á–µ–Ω)", 
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "winner_chat_id", 
                4590374306, 
                "ID —á–∞—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –≤—ã–∏–≥—Ä—ã—à–∞—Ö –≤ GiveShare", 
                validator=loader.validators.Integer()
            ),
            loader.ConfigValue(
                "whitelist", 
                [], 
                "ID —á–∞—Ç–æ–≤ –∏ –∫–∞–Ω–∞–ª–æ–≤, –æ—Ç –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –æ—Ç–ø–∏—Å—ã–≤–∞—Ç—å—Å—è", 
                validator=loader.validators.Series(loader.validators.Integer())
            ),
            loader.ConfigValue(
                "unsubscribe_delay", 
                5, 
                "–ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø–∏—Å–∫–æ–π (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)", 
                validator=loader.validators.Integer()
            ),
            loader.ConfigValue(
                "api_key", 
                "", 
                lambda: self.strings["config_api_key"], 
                validator=loader.validators.String()
            ),
            loader.ConfigValue(
                "delay", 
                5.0, 
                lambda: self.strings["config_delay"], 
                validator=loader.validators.Float(minimum=0.5)
            )
        )
        self.reply_users = {}
        self.log_chat = None
        self.logged_messages = set()
        self._event_handlers = []
        self.lock = asyncio.Lock()
        self.scraper = cloudscraper.create_scraper()
        self.processed_codes = set()
        self.processed_ids = set()
        self.processing = False
        self.bot_id = 6032895492
        self.api_url = "https://2captcha.com"
        self._handler = None

    async def clean_telegram_url(self, url: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ URL –æ—Ç HTML-–º—É—Å–æ—Ä–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø—É—Ç–∏"""
        clean_url = re.sub(r'[\s<>"\'&>].*', '', url)
        match = re.search(
            r'(?:https?://)?t\.me/((?:c/|joinchat/)?[a-zA-Z0-9_+-]{5,}(?:/[0-9]+)?)', 
            clean_url,
            re.IGNORECASE
        )
        return f"https://t.me/{match.group(1)}" if match else ""

    async def extract_valid_urls(self, text: str) -> list:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è Telegram-—Å—Å—ã–ª–æ–∫ –∏ @—É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        raw_urls = re.findall(
            r'(?:https?://)?t\.me/[\S]+|https?://t\.me/[\S]+', 
            text, 
            re.IGNORECASE
        )
        raw_mentions = re.findall(
            r'(?<!\w)@([a-zA-Z0-9_]{5,32})\b',
            text
        )
        mentions_urls = [f"https://t.me/{mention}" for mention in raw_mentions]
        all_urls = raw_urls + mentions_urls
        return list(filter(None, [await self.clean_telegram_url(url) for url in all_urls]))
        
    async def join_with_retry(self, link: str):
        """–£–º–Ω–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        attempts = 0
        max_attempts = 3
        while attempts < max_attempts:
            try:
                if "/+" in link:
                    code = link.split("t.me/+")[1]
                    await self.client(ImportChatInviteRequest(code))
                else:
                    username = link.split("t.me/")[1]
                    await self.client(JoinChannelRequest(username))
                return True
            except FloodWaitError as e:
                wait_time = e.seconds + 5
                logger.warning(f"–§–ª—É–¥–≤–µ–π—Ç {wait_time} —Å–µ–∫. –û–∂–∏–¥–∞—é...")
                await asyncio.sleep(wait_time)
                attempts += 1
                if attempts >= max_attempts:
                    return f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {link} –ö–æ–¥ –æ—à–∏–±–∫–∏: –§–ª—É–¥–≤–µ–π—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {wait_time} —Å–µ–∫—É–Ω–¥."
            except errors.UserAlreadyParticipantError:
                return f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {link} –ö–æ–¥ –æ—à–∏–±–∫–∏: –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã."
            except errors.ChannelsTooMuchError:
                return f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {link} –ö–æ–¥ –æ—à–∏–±–∫–∏: –£ –≤–∞—Å –ª–∏–º–∏—Ç—ã –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤."
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è: {str(e)}")
                return f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {link} –ö–æ–¥ –æ—à–∏–±–∫–∏: {str(e)}"
        return False
    
    async def process_subscription(self, link: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–∞ —Å—Å—ã–ª–∫–∏"""
        try:
            if link.startswith("@"):  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º @username –≤ https://t.me/username
                link = f"https://t.me/{link[1:]}"
            
            entity = await self.client.get_entity(link)
            if not isinstance(entity, Channel):
                return f"{link} - —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
            
            if await self.is_subscribed(link):
                return f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {link} –ö–æ–¥ –æ—à–∏–±–∫–∏: –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã."
            
            result = await self.join_with_retry(link)
            if result is True:
                return f"–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ {link}"
            else:
                return result  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–∑ join_with_retry
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
            return f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {link} –ö–æ–¥ –æ—à–∏–±–∫–∏: {str(e)}"

    async def extract_and_process_links(self, message, urls):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ –∏–∑ –ø–æ—Å—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–∞ (–∫–∞–Ω–∞–ª –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)"""
        results = {"success": [], "errors": [], "ignored": []}
        
        for url in urls:
            try:
                entity = await self.client.get_entity(url)
                if isinstance(entity, Channel):
                    status = await self.process_subscription(url)
                    if status == "success":
                        results["success"].append(f"–ü–æ–¥–ø–∏—Å–∞–ª—Å—è: {url}")
                    elif status == "already_subscribed":
                        results["ignored"].append(f"–£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω: {url}")
                    else:
                        results["errors"].append(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {url}")
                else:
                    results["ignored"].append(f"{url} - —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                
                await asyncio.sleep(self.config["delay"])
            except Exception as e:
                results["errors"].append(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {url}: {str(e)}")
        
        return results
            
    async def client_ready(self, client, db):
        self.client = client
        self.db = db

        # –ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏–∑ CHANNELS
        if hasattr(self, "CHANNELS") and self.CHANNELS:
            for link in self.CHANNELS:
                try:
                    if link.startswith(("https://t.me/+", "t.me/+")):
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–æ–∫
                        invite_code = link.split("+")[-1]
                        await client(ImportChatInviteRequest(invite_code))
                        self.log(f"‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è –ø–æ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–µ: {link}")
                    else:
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
                        username = link.split("t.me/")[-1]
                        await client(JoinChannelRequest(username))
                        self.log(f"‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª: {link}")
                    
                    await asyncio.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–¥–ø–∏—Å–∫–∞–º–∏

                except errors.FloodWaitError as e:
                    logger.warning(f"‚ö†Ô∏è –§–ª—É–¥–≤–µ–π—Ç {e.seconds} —Å–µ–∫. –¥–ª—è {link}")
                    await asyncio.sleep(e.seconds)
                
                except errors.UserAlreadyParticipantError:
                    logger.info(f"‚ÑπÔ∏è –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω: {link}")
                
                except errors.InviteHashExpiredError:
                    logger.error(f"‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞: {link}")
                    await self.send_error_to_channel(f"–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {link}")
                
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {link}: {str(e)}")
                    await self.send_error_to_channel(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ {link}: {str(e)}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ª–æ–≥-—á–∞—Ç–∞
        try:
            self.log_chat = await self.client.get_entity(self.config["log_chat_username"])
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥-—á–∞—Ç–∞: {str(e)}")
            self.log_chat = None

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        for handler in self._event_handlers:
            try:
                client.remove_event_handler(handler)
            except ValueError:
                pass
        self._event_handlers.clear()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
        if hasattr(self, "CHANNEL_USERNAME") and self.CHANNEL_USERNAME:
            try:
                if not await self.is_subscribed(self.CHANNEL_USERNAME):
                    await client(JoinChannelRequest(self.CHANNEL_USERNAME))
                    logger.info("‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞")
            except errors.FloodWaitError as e:
                logger.error(f"‚õîÔ∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ñ–ª—É–¥–≤–µ–π—Ç–∞: {e.seconds} —Å–µ–∫.")
                raise loader.LoadError(f"FloodWaitError: {e.seconds} seconds")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: {str(e)}")
                await self.send_error_to_channel(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: {str(e)}")
                raise loader.LoadError(self.strings["sub_required"])

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        self._event_handlers = [
            client.add_event_handler(self.on_new_message, events.NewMessage(incoming=True)),
            client.add_event_handler(self.handle_log_reply, events.NewMessage(chats=self.log_chat, incoming=True)),
            client.add_event_handler(self.giveshare, events.NewMessage),
            client.add_event_handler(self.giveshare, events.MessageEdited)
        ]

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞
        self._handler = client.add_event_handler(
            self.on_message, 
            events.NewMessage(from_users=[self.bot_id])
        )

        def log(self, message: str):
            logger.info(message)

    async def ensure_subscription(self, message):
        if not await self.is_subscribed():
            await message.edit(self.strings["sub_required"])
            return False
        return True

    async def apply_delay(self):
        await asyncio.sleep(self.config["delay"])

    async def send_error_to_channel(self, error_message):
        try:
            await self.client.send_message(self.config["log_chat_id"], f"–û—à–∏–±–∫–∞: {error_message}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É: {e}", exc_info=True)

    async def send_success_to_channel(self, success_message):
        if not self.config["log_success"]:
            return
        try:
            await self.client.send_message(self.config["success_log_chat_id"], success_message)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ: {e}", exc_info=True)

    @loader.command()
    async def getinfo(self, message):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–∫–∫–∞—É–Ω—Ç–µ"""
        try:
            me = await self.client.get_me()
            number = me.phone if me.phone else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            account_id = me.id
            limits = await self.check_limits()
            reg_date = await get_creation_date(account_id)
            name_text = me.first_name if me.first_name else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            info = (
                "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n"
                "‚ïë –ú–ò–ù–û–ú–û–¢–û –ò–ù–§–û\n"
                f"‚ïë –ò–ú–Ø –ê–ö–ö–ê–£–ù–¢–ê: [{name_text}](tg://user?id={account_id})\n"
                "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£\n"
                f"‚ïë –ù–û–ú–ï–†: +{number}\n"
                f"‚ïë –ê–ô–î–ò: {account_id}\n"
                f"‚ïë –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {reg_date}\n"
                f"‚ïë –õ–ò–ú–ò–¢ –ê–ö–ö–ê–£–ù–¢–û–í: {limits}/500\n"
                "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
            )
            await message.respond(info, parse_mode="markdown", link_preview=False)
        except Exception as e:
            await self.send_error_to_channel(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            logger.error(f"getinfo error: {e}")

    async def find_verification_code(self):
        async for msg in self.client.iter_messages(777000, limit=50):
            codes = re.findall(r'\b(\d{5})\b', msg.raw_text)
            if codes:
                return codes[0]
            m = re.search(r'–∫–æ–¥ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ—á—Ç—É.*?(\d{5})', msg.raw_text, re.IGNORECASE)
            if m:
                return m.group(1)
        return None

    @loader.command()
    async def getcode(self, message):
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        code = await self.find_verification_code()
        if code:
            await message.respond(f"üîπ –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {'.'.join(code)}")
        else:
            await self.send_error_to_channel(self.strings["no_code"])

    async def get_account_number(self):
        me = await self.client.get_me()
        return me.phone if me.phone else None

    @loader.command()
    async def getnumber(self, message):
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞"""
        number = await self.get_account_number()
        if number:
            await message.respond(f"üìû –ù–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞: +{number}")
        else:
            await self.send_error_to_channel(self.strings["no_number"])

    async def check_limits(self):
        dialogs = await self.client.get_dialogs()
        channels = [d for d in dialogs if d.is_channel]
        return len(channels)

    async def sub(self, message):
        """–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã."""
        await self.apply_delay()  # –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã

        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –±–µ—Ä—ë–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–ø–ª–∞—è, –∏–Ω–∞—á–µ ‚Äî –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        reply = await message.get_reply_message()
        args = utils.get_args_raw(message)

        text_to_process = None
        if reply:
            text_to_process = reply.raw_text.strip() if reply.raw_text else None  # –ò—Å–ø–æ–ª—å–∑—É–µ–º raw_text
            logger.info(f"[SUB] –¢–µ–∫—Å—Ç –∏–∑ —Ä–µ–ø–ª–∞—è: {text_to_process}")  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–ø–ª–∞—è
        else:
            text_to_process = args.strip() if args else None

        if not text_to_process:
            await message.edit("<b>‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.</b>")
            return

        # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ
        url_matches = re.findall(r'https?://t\.me/[^\s]+', text_to_process)
        mention_matches = re.findall(r'@[\w_]+', text_to_process)
        
        urls = url_matches.copy()
        for mention in mention_matches:
            if mention not in urls:
                urls.append(mention)

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        if not urls:
            target = text_to_process.strip()
            if not target.startswith("@") and not target.startswith("t.me/"):
                target = f"@{target}"
            urls = [target]

        results = []
        for url in urls:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º @username –≤ —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            if url.startswith("@"):
                url = f"https://t.me/{url[1:]}"
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Å—ã–ª–∫–∏: –µ—Å–ª–∏ —ç—Ç–æ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤
            if "/+" in url or "joinchat" in url:
                res = await self.subscribe_private(url)
            else:
                res = await self.subscribe_public(url)
            results.append(res)
            await asyncio.sleep(self.config["delay"])
        
        final_text = "<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n" + "\n".join(results)
        await message.edit(final_text, parse_mode="html")
        await self.send_logger_message(final_text)
    
    @loader.command()
    async def subcmd(self, message):
        """–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã."""
        if not await self.ensure_subscription(message):
            return
        await self.apply_delay()
        urls = await self.extract_valid_urls(utils.get_args_raw(message))
        if not urls:
            await self.send_error_to_channel(f"{ERROR_PREFIX}–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.{ERROR_SUFFIX}")
            return
    
        success, failed = 0, 0
        for link in urls:
            try:
                if "/+" in link:
                    code = link.split("t.me/+")[1]
                    await self.client(ImportChatInviteRequest(code))
                else:
                    uname = link.split("t.me/")[1]
                    await self.client(JoinChannelRequest(uname))
                success += 1
                await asyncio.sleep(self.config["delay"])
            except Exception as e:
                error_text = str(e)
                # –ú–∞–ø–ø–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–∫–∏ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
                if "FloodWait" in error_text or "joined too many channels" in error_text:
                    # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—à–∏–±–∫–∏.
                    match = re.search(r'(\d+)\s*seconds', error_text)
                    if match:
                        seconds = match.group(1)
                        short_msg = f"–ö–û–î –û–®–ò–ë–ö–ò: –§–õ–£–î–í–ï–ô–¢ {seconds} —Å–µ–∫—É–Ω–¥"
                    else:
                        short_msg = "–ö–û–î –û–®–ò–ë–ö–ò: –§–õ–£–î–í–ï–ô–¢"
                elif "invalid" in error_text.lower() or "can't do that" in error_text.lower():
                    short_msg = "–ö–û–î –û–®–ò–ë–ö–ò –ù–ï –ù–ê–ô–î–ï–ù –ß–ê–¢/–ö–ê–ù–ê–õ"
                elif "banned" in error_text.lower():
                    short_msg = "–ö–û–î –û–®–ò–ë–ö–ò : –í–´ –ó–ê–ë–ê–ù–ï–ù–´ –í –ö–ê–ù–ê–õ–ï"
                else:
                    short_msg = f"–ö–û–î –û–®–ò–ë–ö–ò: {error_text}"
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {link}: {e}", exc_info=True)
                await self.send_error_to_channel(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {link}: {short_msg}")
                failed += 1
    
        res = f"–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É—Å–ø–µ—à–Ω–æ {success}, –Ω–µ —É–¥–∞–ª–æ—Å—å {failed}.\n–ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞: {', '.join(urls)}"
        await self.send_success_to_channel(res)
    
    @loader.command()
    async def unsubcmd(self, message):
        """–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∫–∞–Ω–∞–ª–æ–≤ –ø–æ —Å—Å—ã–ª–∫–∞–º/ID/–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º."""
        if not await self.ensure_subscription(message):
            return
    
        await self.apply_delay()
        args = utils.get_args_raw(message)
        urls = await self.extract_valid_urls(args)
        if not urls:
            await self.send_error_to_channel(f"{ERROR_PREFIX}–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏.{ERROR_SUFFIX}")
            return
    
        delay = self.config.get("delay", 1)
        success, failed, done_message = 0, 0, ""
    
        for i, link in enumerate(urls, start=1):
            try:
                result = await self.unsubscribe_handler(link)
                done_message += f"{i}. {result}\n"
                if "‚ôªÔ∏è" in result:
                    success += 1
                else:
                    failed += 1
                await asyncio.sleep(delay)
            except Exception as e:
                failed += 1
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç {link}: {e}", exc_info=True)
                await self.send_error_to_channel(f"üö´ –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç {link}: {e}")
    
        result_text = (
            f"<b>‚úÖ –û—Ç–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.</b>\n"
            f"<b>–£—Å–ø–µ—à–Ω–æ:</b> {success}, <b>–ù–µ —É–¥–∞–ª–æ—Å—å:</b> {failed}\n"
            f"<b>–°—Å—ã–ª–∫–∏:</b> {', '.join(urls)}"
        )
    
        await self.send_success_to_channel(f"{done_message}\n{result_text}")
    
    # ============================ –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–°–´–õ–û–ö =============================
    
    async def unsubscribe_handler(self, target):
        try:
            if target.isdigit() or "t.me/c/" in target or "t.me/+" in target:
                return await self.unsubscribe_id(target)
            elif target.startswith("@") or "t.me/" in target:
                return await self.unsubscribe_public(target)
            else:
                return "<b>üö´ –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏.</b>"
        except Exception as e:
            return f"<b>üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ:</b> {e}"

    async def is_subscribed(self, target_channel=None):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª"""
        try:
            channel = target_channel or self.CHANNEL_USERNAME
            participant = await self.client(GetParticipantRequest(channel, "me"))
            return isinstance(participant.participant, ChannelParticipantSelf)
        except ValueError:
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False

    async def unsubscribe_id(self, target):
        try:
            if "t.me/c/" in target:
                chan = target.split("t.me/c/")[1].split("/")[0]
                channel_id = int(chan)
                link = f"https://t.me/c/{channel_id}"
            elif "t.me/+" in target:
                entity = await self.client.get_entity(target)
                channel_id = entity.id
                link = f"https://t.me/c/{channel_id}"
            elif target.isdigit():
                channel_id = int(target)
                link = f"https://t.me/c/{channel_id}"
            else:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–π —Å—Å—ã–ª–∫–∏ –∏–ª–∏ ID.")
    
            await self.client(LeaveChannelRequest(channel_id))
            return f"<b>‚ôªÔ∏è UNSUBSCRIBE: <a href='{link}'>PRIVATE</a></b>"
        except Exception as e:
            if "Cannot cast InputPeerUser" in str(e):
                try:
                    await self.client.delete_dialog(channel_id)
                    return f"<b>‚ôªÔ∏è UNSUBSCR: <a href='{link}'>PRIVATE PM</a></b>"
                except Exception as e2:
                    return f"<b>üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥:</b> {e2}"
            return f"<b>üö´ UNSUB PRIVATE:</b> {e}"
    
    async def unsubscribe_public(self, target):
        try:
            if target.startswith("@"):
                username = target[1:]
            elif "t.me/" in target:
                username = target.split("t.me/")[1].split("/")[0]
            else:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏.")
    
            link = f"https://t.me/{username}"
            await self.client.get_entity(username)
            await self.client(LeaveChannelRequest(username))
            return f"<b>‚ôªÔ∏è UNSUBSCRIBE: <a href='{link}'>PUBLIC</a></b>"
        except Exception as e:
            if "Cannot cast InputPeerUser" in str(e):
                try:
                    await self.client.delete_dialog(username)
                    return f"<b>‚ôªÔ∏è UNSUBSCR: <a href='{link}'>PUBLIC PM</a></b>"
                except Exception as e2:
                    return f"<b>üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥:</b> {e2}"
            return f"<b>üö´ UNSUB PUBLIC:</b> {e}"

    @loader.command()
    async def run(self, message):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        raw_args = utils.get_args_raw(message)
        urls = re.findall(r't\.me/(c/\d+/\d+|\w+/\d+)', raw_args)
        # –ï—Å–ª–∏ –Ω–∏ —Å—Å—ã–ª–∫–∏, –Ω–∏ @—É–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
        at_channels_in_args = re.findall(r'@(\w+)', raw_args)
        if not urls and not at_channels_in_args:
            return await utils.answer(message, f"{ERROR_PREFIX}–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ @—É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤{ERROR_SUFFIX}")
        
        subscription_logs = []
        button_responses = []
        errors = []
        subscribed_channels = set()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        for url in urls:
            try:
                if url.startswith("c/"):
                    chat_id, msg_id = url.split("/")[1:]
                    msg = await self.client.get_messages(int(f"-100{chat_id}"), ids=int(msg_id))
                    source_channel_username = None
                else:
                    username, msg_id = url.split("/")
                    msg = await self.client.get_messages(username, ids=int(msg_id))
                    source_channel_username = username
                    if source_channel_username and source_channel_username not in subscribed_channels:
                        try:
                            await self.client(JoinChannelRequest(source_channel_username))
                            entity = await self.client.get_entity(source_channel_username)
                            title = getattr(entity, "title", str(entity))
                            public_link = f"https://t.me/{entity.username}" if entity.username else "–Ω–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏"
                            subscription_logs.append(f'–ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª <a href="{public_link}">{title}</a>')
                            subscribed_channels.add(source_channel_username)
                        except Exception as e:
                            if "already a participant" not in str(e):
                                errors.append(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ {source_channel_username}: {str(e)}")
                        await asyncio.sleep(self.config["delay"])
        
                channel_links = re.findall(r't\.me/(\+?\w+)', msg.text)
                for link in channel_links:
                    try:
                        if link.startswith("+"):
                            result = await self.client(ImportChatInviteRequest(link[1:]))
                            if hasattr(result, "chats") and result.chats:
                                channel_entity = result.chats[0]
                                title = getattr(channel_entity, "title", str(channel_entity))
                                public_link = f"https://t.me/{channel_entity.username}" if channel_entity.username else "–Ω–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏"
                                subscription_logs.append(f'–ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª <a href="{public_link}">{title}</a>')
                            else:
                                subscription_logs.append(f"–ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª (–∏–Ω–≤–∞–π—Ç: {link})")
                        else:
                            await self.client(JoinChannelRequest(link))
                            entity = await self.client.get_entity(link)
                            title = getattr(entity, "title", str(entity))
                            public_link = f"https://t.me/{entity.username}" if entity.username else "–Ω–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏"
                            subscription_logs.append(f'–ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª <a href="{public_link}">{title}</a>')
                        await asyncio.sleep(self.config["delay"])
                    except Exception as e:
                        if "already a participant" not in str(e):
                            errors.append(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ https://t.me/{link}: {str(e)}")
        
                if msg.buttons:
                    button_msg = await msg.click(0)
                    response_text = button_msg.message if hasattr(button_msg, "message") else "–±–µ–∑ –æ—Ç–≤–µ—Ç–∞"
                    button_responses.append(f"–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞: {response_text}")
                    await asyncio.sleep(self.config["delay"])
        
            except Exception as e:
                errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {url}: {str(e)}")
            await asyncio.sleep(self.config["delay"])
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —á–µ—Ä–µ–∑ @ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –∫–æ–º–∞–Ω–¥—ã
        for channel in at_channels_in_args:
            if channel.lower() == "boost":
                subscription_logs.append(f'–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏: @{channel}')
                continue
            if channel not in subscribed_channels:
                try:
                    entity = await self.client.get_entity(channel)
                    if entity.__class__.__name__ == "User":
                        continue
                    await self.client(JoinChannelRequest(channel))
                    entity = await self.client.get_entity(channel)
                    title = getattr(entity, "title", str(entity))
                    public_link = f"https://t.me/{entity.username}" if entity.username else "–Ω–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏"
                    subscription_logs.append(f'–ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª <a href="{public_link}">{title}</a>')
                    subscribed_channels.add(channel)
                except Exception as e:
                    if "already a participant" not in str(e):
                        errors.append(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª @{channel}: {str(e)}")
                await asyncio.sleep(self.config["delay"])
        
        if subscription_logs or button_responses:
            success_log = ""
            if subscription_logs:
                success_log += "–£—Å–ø–µ—à–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n" + "\n".join(subscription_logs) + "\n"
            if button_responses:
                success_log += "üîò –û—Ç–≤–µ—Ç—ã –∫–Ω–æ–ø–æ–∫:\n" + "\n".join(button_responses)
            await self.send_success_to_channel(success_log)
        
        if errors:
            error_log = "‚ùå –û—à–∏–±–∫–∏:\n" + "\n".join(errors)
            await self.send_error_to_channel(error_log)

    @loader.command()
    async def refk(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –∏–∑ –ø–æ—Å—Ç–∞."""
        
    async def get_bot_response(client, bot_username, timeout=120):
        """–û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."""
        start_time = asyncio.get_event_loop().time()
        
        while asyncio.get_event_loop().time() - start_time < timeout:
            messages = await client.get_messages(bot_username, limit=1)
            if messages:
                return messages[0].text
            await asyncio.sleep(2)  # –ñ–¥—ë–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        
        return "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ (—Ç–∞–π–º–∞—É—Ç)"
        
        async def handle_bot_interaction(link: str):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –∫–∞–ø—á–∞–º: 120 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è –∏ –Ω–µ –±–æ–ª–µ–µ 3 –ø–æ–ø—ã—Ç–æ–∫"""
            try:
                if "?start=" not in link:
                    return False
                bot_username = link.split("t.me/")[1].split("?")[0]
                ref_code = link.split("?start=")[1]
                await self.client.send_message(bot_username, f"/start {ref_code}")
                await asyncio.sleep(self.config["delay"])
                captcha_attempts = 0
                while captcha_attempts < 3:
                    try:
                        msg = await self.client.wait_for_new_message(from_users=bot_username, timeout=120)
                    except asyncio.TimeoutError:
                        break
                    captcha_attempts += 1
                    if msg.out or not msg.media:
                        continue
                    if "—á–∏—Å–ª–∞ –≤—ã –≤–∏–¥–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ" in msg.text:
                        img_bytes = await msg.download_media(bytes)
                        if not img_bytes:
                            continue
                        solution = await solve_captcha(img_bytes)
                        if solution:
                            await msg.reply(solution)
                            await asyncio.sleep(self.config["delay"])
                            return True
                        else:
                            continue
                    else:
                        return True
                return False
            except Exception as e:
                logging.error(f"Bot interaction error: {str(e)}")
                return False

        urls = re.findall(r't\.me/(c/\d+/\d+|\w+/\d+)', utils.get_args_raw(message))
        if not urls:
            await self.send_error_to_channel(f"{ERROR_PREFIX}–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫–∏{ERROR_SUFFIX}")
            return

        referral_results = []
        errors = []
        subscribed_channels = set()
        bot_requests = []

        # –ß–∞—Å—Ç—å 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ —Å–±–æ—Ä —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        for url in urls:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ
                if url.startswith("c/"):
                    chat_id, msg_id = url.split("/")[1:]
                    msg = await self.client.get_messages(int(f"-100{chat_id}"), ids=int(msg_id))
                else:
                    username, msg_id = url.split("/")
                    try:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                        entity = await self.client.get_entity(username)
                    except Exception:
                        continue
                    if entity.__class__.__name__ == "User":
                        continue
                    msg = await self.client.get_messages(username, ids=int(msg_id))
                    if username not in subscribed_channels:
                        try:
                            await self.client(JoinChannelRequest(username))
                            entity = await self.client.get_entity(username)
                            title = getattr(entity, "title", str(entity))
                            public_link = f"https://t.me/{entity.username}" if entity.username else "–Ω–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏"
                            referral_results.append(f'–ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ <a href="{public_link}">{title}</a>')
                            subscribed_channels.add(username)
                        except Exception as e:
                            if "already a participant" not in str(e):
                                errors.append(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ {username}: {str(e)}")
                        await asyncio.sleep(self.config["delay"])

                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫, –Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, boost)
                filtered_text = msg.text
                skip_links = re.findall(r'https?://t\.me/boost/\S+', filtered_text)
                for link in skip_links:
                    referral_results.append(f'–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏: {link}')
                filtered_text = re.sub(r'https?://t\.me/boost/\S+', '', filtered_text)

                # –°–±–æ—Ä —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–∑ –∫–Ω–æ–ø–æ–∫
                if msg.buttons:
                    flat_buttons = [btn for row in msg.buttons for btn in row]
                    for btn in flat_buttons:
                        if getattr(btn, "url", None) and "?start=" in btn.url:
                            ref_url = btn.url
                            ref_match = re.search(r'\?start=(\S+)', ref_url)
                            if ref_match:
                                ref_key = ref_match.group(1)
                                bot_username = ref_url.split("t.me/")[1].split("?")[0]
                                bot_requests.append((bot_username, ref_key))
                                referral_results.append(f'–ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: <a href="https://t.me/{bot_username}">{bot_username}</a>')
                                break

                # –ï—Å–ª–∏ –≤ –∫–Ω–æ–ø–∫–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π URL ‚Äì –∏—â–µ–º –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç–µ
                if not any(getattr(btn, "url", "") and "?start=" in btn.url for row in (msg.buttons or []) for btn in row):
                    ref_match = re.search(r'https?://t\.me/([^?]+)\?start=(\S+)', filtered_text)
                    if ref_match:
                        bot_username, ref_key = ref_match.groups()
                        bot_requests.append((bot_username, ref_key))
                        referral_results.append(f'–ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: <a href="https://t.me/{bot_username}">{bot_username}</a>')

                # –û–±—Ä–∞–±–æ—Ç–∫–∞: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã, —É–∫–∞–∑–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ @
                at_channels = re.findall(r'@(\w+)', filtered_text)
                for channel in at_channels:
                    if channel.lower() == "boost":
                        referral_results.append(f'–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏: @{channel}')
                        continue
                    if channel not in subscribed_channels:
                        try:
                            entity = await self.client.get_entity(channel)
                            if entity.__class__.__name__ == "User":
                                continue
                            await self.client(JoinChannelRequest(channel))
                            entity = await self.client.get_entity(channel)
                            title = getattr(entity, "title", str(entity))
                            public_link = f"https://t.me/{entity.username}" if entity.username else "–Ω–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏"
                            referral_results.append(f'–ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª <a href="{public_link}">{title}</a>')
                            subscribed_channels.add(channel)
                        except Exception as e:
                            if "already a participant" not in str(e):
                                errors.append(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª @{channel}: {str(e)}")
                        await asyncio.sleep(self.config["delay"])

                # –û–±—Ä–∞–±–æ—Ç–∫–∞: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ –ª—é–±—ã–µ Telegram-—Å—Å—ã–ª–∫–∏
                plain_links = re.findall(r'https?://t\.me/([A-Za-z0-9_]+)(?!/)', filtered_text)
                for channel in plain_links:
                    if f"t.me/{channel}?start=" in filtered_text:
                        continue
                    if channel.lower() == "boost":
                        referral_results.append(f'–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏: https://t.me/{channel}')
                        continue
                    if channel not in subscribed_channels:
                        try:
                            entity = await self.client.get_entity(channel)
                            if entity.__class__.__name__ == "User":
                                continue
                            await self.client(JoinChannelRequest(channel))
                            entity = await self.client.get_entity(channel)
                            title = getattr(entity, "title", str(entity))
                            public_link = f"https://t.me/{entity.username}" if entity.username else "–Ω–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏"
                            referral_results.append(f'–ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª <a href="{public_link}">{title}</a>')
                            subscribed_channels.add(channel)
                        except Exception as e:
                            if "already a participant" not in str(e):
                                errors.append(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ —Å—Å—ã–ª–∫—É https://t.me/{channel}: {str(e)}")
                        await asyncio.sleep(self.config["delay"])

                await asyncio.sleep(self.config["delay"])
            except Exception as e:
                errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {url}: {str(e)}")

        # –ß–∞—Å—Ç—å 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞–º —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–∞
        for bot_username, ref_key in bot_requests:
            try:
                await self.client.send_message(bot_username, f"/start {ref_key}")
                response_text = await get_bot_response(bot_username, timeout=120)
                await asyncio.sleep(self.config["delay"])
                formatted_message = (
                    f"–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: <a href='https://t.me/{bot_username}'>{bot_username}</a>\n"
                    f"–û—Ç–≤–µ—Ç –±–æ—Ç–∞: {response_text}"
                )
                if response_text.startswith("üéâ"):
                    referral_results.append(formatted_message)
                elif response_text.startswith("‚ùå"):
                    errors.append(formatted_message)
                else:
                    referral_results.append(formatted_message)
            except Exception as e:
                errors.append(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –¥–ª—è {bot_username}: {str(e)}")

        # –ß–∞—Å—Ç—å 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ø—á–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
        for url in urls:
            try:
                if url.startswith("t.me"):
                    url = f"https://{url}"
                try:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å –¥–ª—è —Å—Å—ã–ª–∫–∏ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—ë
                    entity = await self.client.get_entity(url)
                except Exception:
                    continue
                if not isinstance(entity, Channel):
                    continue
                if not await self.is_subscribed(entity.id):
                    await self.client(JoinChannelRequest(entity))
                    referral_results.append(f"–ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫: {entity.title}")
                    await asyncio.sleep(self.config["delay"])
                msg_id = int(url.split("/")[-1]) if url.split("/")[-1].isdigit() else None
                if msg_id:
                    msg = await self.client.get_messages(entity, ids=msg_id)
                else:
                    errors.append(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {url}: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                    continue
                if not msg:
                    continue
                processed_links = set()
                all_links = await self.extract_valid_urls(
                    msg.text + "\n".join(btn.url for row in msg.buttons for btn in row if hasattr(btn, "url"))
                )
                for link in all_links:
                    if link in processed_links:
                        continue
                    processed_links.add(link)
                    if "?start=" in link:
                        success = await handle_bot_interaction(link)
                        status = "‚úÖ –†–µ—Ñ–µ—Ä–∞–ª" if success else "‚ùå –û—à–∏–±–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞"
                        if success:
                            referral_results.append(f"{status}: {link}")
                        else:
                            errors.append(f"{status}: {link}")
                        await asyncio.sleep(self.config["delay"])
                    else:
                        status = await self.process_subscription(link)
                        if status == "success":
                            referral_results.append(f"–ü–æ–¥–ø–∏—Å–∞–ª—Å—è: {link}")
                        elif status != "already_subscribed":
                            errors.append(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {link}")
                await asyncio.sleep(self.config["delay"])
            except Exception as e:
                errors.append(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {url}: {str(e)}")
        
        if referral_results:
            await self.send_success_to_channel("‚úÖ <b>–£—Å–ø–µ—à–Ω–æ:</b>\n" + "\n".join(referral_results))

        if errors:
            await self.send_error_to_channel("‚ùå <b>–û—à–∏–±–∫–∏:</b>\n" + "\n".join(errors))
        
    @loader.command()
    async def refcmd(self, message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞–ø—á–∏ (–æ–∂–∏–¥–∞–Ω–∏–µ –¥–æ 120 —Å–µ–∫ –∏ –Ω–µ –±–æ–ª–µ–µ 3 –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥—É)."""
        if not await self.ensure_subscription(message):
            return
        await self.apply_delay()
        args = utils.get_args_raw(message)
        if not args:
            await message.edit(f"{ERROR_PREFIX}–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–æ—Ç–æ–≤ —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏.{ERROR_SUFFIX}")
            return
        links = re.findall(r'https?://t\.me/.*', args)
        if not links:   
            await message.edit(f"{ERROR_PREFIX}–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.{ERROR_SUFFIX}")
            return
        success, failed = 0, 0
        results = []
        for link in links:
            try:
                if "?start=" in link:
                    bot_link, ref_code = link.split("?start=")
                    bot_username = bot_link.split("t.me/")[1]
                    attempts = 0
                    response_received = False
                    while attempts < 3 and not response_received:
                        await self.client.send_message(bot_link, f"/start {ref_code}")
                        bot_response = await self.get_bot_response(bot_username, timeout=120)
                        if "—á–∏—Å–ª–∞ –≤—ã –≤–∏–¥–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ" in bot_response:
                            attempts += 1
                            results.append(f"{bot_link}: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∫–∞–ø—á–∏, –ø–æ–ø—ã—Ç–∫–∞ {attempts}")
                            continue
                        else:
                            results.append(f"{bot_link}: {bot_response}")
                            success += 1
                            response_received = True
                    if not response_received:
                        failed += 1
                else:
                    results.append(f"–°—Å—ã–ª–∫–∞ {link} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞.")
                    failed += 1
                await asyncio.sleep(self.config["delay"])
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {link}: {e}", exc_info=True)
                results.append(f"–û—à–∏–±–∫–∞ –¥–ª—è {link}: {e}")
                failed += 1
        res = f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã: —É—Å–ø–µ—à–Ω–æ {success}, –Ω–µ —É–¥–∞–ª–æ—Å—å {failed}.\n–û—Ç–≤–µ—Ç—ã –±–æ—Ç–∞:\n" + "\n".join(results)
        await message.edit(res)
        await self.send_success_to_channel(res) 

    async def giveshare(self, event):
        if not self.config["watcher_on"]:
            return

        message_text = event.message.message
        url_pattern = r'https?://t\.me/GiveShareBot/app\?startapp=([A-Za-z0-9]+)'
        codes_in_text = re.findall(url_pattern, message_text)

        if event.message.reply_markup:
            for row in event.message.reply_markup.rows:
                for button in row.buttons:
                    if isinstance(button, KeyboardButtonUrl) and button.url:
                        code_match = re.match(url_pattern, button.url)
                        if code_match:
                            code = code_match.group(1)
                            if code not in self.processed_codes:
                                await self.participate(code)
                            return

        if codes_in_text:
            for code in codes_in_text:
                if code not in self.processed_codes:
                    await self.participate(code)
    
    async def log(self, message):
        if self.config["logs_username"]:
            await self.client.send_message(self.config["logs_username"], message, link_preview=False)

    async def participate(self, code):
        giveaway_url = f"https://t.me/GiveShareBot/app?startapp={code}"

        init_data = await self.data()
        
        response = self.scraper.post(
            'https://api.giveshare.ru/index',
            headers={
                'Content-Type': 'application/json',
                'Accept': 'application/json, text/plain, */*'
            },
            json={
                "initData": init_data,
                "param": code
            }
        )
        
        raffle_data = response.json()
        
        if 'raffle' in raffle_data:
            raffle = raffle_data['raffle']
            
            if raffle['id'] in self.processed_ids:
                return
            
            self.processed_ids.add(raffle['id'])
            
            log_info = (
                f"<emoji document_id=5456140674028019486>‚ö°Ô∏è</emoji> <b>–£—á–∞—Å—Ç–≤—É—é –≤ –Ω–æ–≤–æ–º <a href='{giveaway_url}'>GiveShare —Ä–æ–∑—ã–≥—Ä—ã—à–µ</a>!</b>\n\n"
                f"<emoji document_id=5467538555158943525>üí≠</emoji> <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <code>{raffle['title']}</code>\n"
                f"<emoji document_id=5334544901428229844>‚ÑπÔ∏è</emoji> <b>–¢–µ–∫—É—â–µ–µ –∫–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> <code>{raffle['members_count']}</code>\n"
                f"<emoji document_id=5440621591387980068>üîú</emoji> <b>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> <code>{raffle['date_end']}</code>\n\n"
                f"<emoji document_id=5282843764451195532>üñ•</emoji> <i>–¢–∞–∫ –∂–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ:</i>\n"
            )
            
            for channel in raffle['channels']:
                channel_link = channel['link']
                channel_name = channel['name']
                log_info += f'‚Ä¢ <b><a href="{channel_link}">{channel_name}</a></b>\n'
                await self.subscribe(channel_link)
            
            self.scraper.post(
                'https://api.giveshare.ru/member/create',
                headers={'Content-Type': 'application/json'},
                json={
                    "initData": init_data,
                    "param": f"{code}",
                    "token": ""
                }
            )

            self.scraper.post(
                'https://api.giveshare.ru/member/check',
                headers={'Content-Type': 'application/json'},
                json={
                    "initData": init_data,
                    "raffle": raffle['id']
                }
            )

            self.processed_codes.add(code)
            await self.log(log_info)
        else:
            return

    async def data(self):
        bot = await self.client.get_input_entity(1618805558)
        app = InputBotAppShortName(bot_id=bot, short_name="app")
        web_view = await self.client(RequestAppWebViewRequest(peer='me', app=app, platform='android'))
        auth_url = web_view.url
        init_data = unquote(auth_url.split('tgWebAppData=')[1].split('&tgWebAppVersion')[0])
        return init_data

    async def subscribe(self, channel_link):
        invite_code = channel_link.split('+')[1]
        try:
            await self.client(ImportChatInviteRequest(invite_code))
        except errors.rpcerrorlist.UserAlreadyParticipantError:
            pass
        except Exception as e:
            await self.log(f"<emoji document_id=5240241223632954241>üö´</emoji> <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª {channel_link}</b>: {e}")

    @loader.command()
    async def givesharecmd(self, message):
        """–≤–∫–ª/–≤—ã–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö"""
        self.config["watcher_on"] = not self.config["watcher_on"]
        await message.edit(f"<emoji document_id=5352746955648813465>ü§ì</emoji> <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö {'–≤–∫–ª—é—á–µ–Ω–æ' if self.config['watcher_on'] else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}</b>")

    class WinnerNotificationModule(loader.Module):
        """–ú–æ–¥—É–ª—å –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –≤—ã–∏–≥—Ä—ã—à–∞—Ö –≤ —á–∞—Ç"""
        strings = {
            "name": "WinnerNotification",
            "message_sent": "–°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–∏–≥—Ä—ã—à–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç."
        }


    @loader.watcher()
    async def watcher(self, message):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ 1618805558 –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∏—Ö –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç"""
        if not self.config["watcher_on"]:
            return

        if message.from_id == 1618805558:
            if "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!" in message.raw_text and "–≤—ã–∏–≥—Ä—ã—à–Ω—ã–π –±–∏–ª–µ—Ç" in message.raw_text:
                chat_id = self.config["winner_chat_id"]
                await self.client.send_message(chat_id, message.raw_text)
                print(self.strings["message_sent"])

    def normalize_id(self, chat_id):
        try:
            chat_id = int(chat_id)
            if chat_id < 0:
                return chat_id
            return int("-100" + str(chat_id))
        except Exception:
            return None

    async def parse_token(self, token, client):
        if token.isdigit() or (token.startswith("-") and token[1:].isdigit()):
            return self.normalize_id(token)
        if token.startswith("@"):  
            username = token[1:]
        elif token.startswith("http://t.me/") or token.startswith("https://t.me/"):
            parts = token.split("/")
            username = parts[-1] if parts[-1] else parts[-2]
        else:
            username = token
        try:
            entity = await client.get_entity(username)
            return entity.id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è entity –¥–ª—è '{token}': {e}")
            return None

    async def awcmd(self, message):
        """
        –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã/—á–∞—Ç—ã –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫."""
        args = message.raw_text.split(maxsplit=1)
        if len(args) < 2:
            await message.reply("<b>‚ùå –£–∫–∞–∂–∏—Ç–µ ID, username –∏–ª–∏ —Å—Å—ã–ª–∫–∏!</b>")
            return
        clean_input = re.sub(r'<[^>]+>', '', args[1])
        tokens = re.split(r"[\s,]+", clean_input)
        tokens = [token.strip() for token in tokens if token.strip()]
        ids = []
        for token in tokens:
            res = await self.parse_token(token, message.client)
            if res is not None:
                ids.append(res)
        if not ids:
            await message.reply("<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∏ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª –∏–ª–∏ —á–∞—Ç.</b>")
            return
        whitelist = set(self.get("whitelist", []))
        whitelist.update(ids)
        self.set("whitelist", list(whitelist))
        await message.reply(f"<b>‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫:</b> {', '.join(map(str, ids))}")

    async def unsuballcmd(self, message):
        """
        –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –∫–∞–Ω–∞–ª–æ–≤, –∫—Ä–æ–º–µ —Ç–µ—Ö, —á—Ç–æ —É–∫–∞–∑–∞–Ω—ã –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .unsuball [—á–∏—Å–ª–æ|all]
        """
        args = message.text.split(maxsplit=1)
        limit = None if len(args) < 2 or args[1].strip().lower() == "all" else int(args[1])
        delay = self.config["delay"]
        whitelist = set(self.get("whitelist", []))
        await message.edit("<b>üîÑ –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø–∏—Å–∫—É –æ—Ç –∫–∞–Ω–∞–ª–æ–≤...</b>")
        success, failed, unsubscribed_count = 0, 0, 0
        async for dialog in self.client.iter_dialogs():
            if limit is not None and unsubscribed_count >= limit:
                break
            entity = dialog.entity
            if isinstance(entity, PeerUser):
                continue
            normalized_id = self.normalize_id(entity.id)
            if normalized_id in whitelist:
                continue
            try:
                await self.client(LeaveChannelRequest(channel=entity))
                success += 1
                unsubscribed_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ {entity.id}: {e}")
                failed += 1
            await asyncio.sleep(delay)
        await message.edit(f"<b>‚úÖ –û—Ç–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:</b> <code>{success}</code> —É—Å–ø–µ—à–Ω–æ, <code>{failed}</code> –æ—à–∏–±–æ–∫.")

    async def whitelistcmd(self, message):
        """
        –í—ã–≤–µ—Å—Ç–∏ —Ç–µ–∫—É—â–∏–π –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–Ω–∞–ª–µ
        """
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (–µ—Å–ª–∏ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
        config_whitelist = self.config.get("whitelist", []) if hasattr(self, "config") else []
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        storage_whitelist = self.get("whitelist", [])
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏, —É—Å—Ç—Ä–∞–Ω—è—è –¥—É–±–ª–∏–∫–∞—Ç—ã
        whitelist = list(set(config_whitelist + storage_whitelist))
        if not whitelist:
            await message.reply("<b>üìÇ –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.</b>")
            return
        output_lines = []
        dialogs = {getattr(d.entity, "id", None): d.entity for d in await message.client.get_dialogs()}
        for chan_id in whitelist:
            entity = None
            try:
                entity = await message.client.get_entity(chan_id)
            except Exception as e:
                if ("Invalid object ID" in str(e) or "Could not find the input entity" in str(e)) and chan_id in dialogs:
                    entity = dialogs[chan_id]
                else:
                    output_lines.append(f"<b>ID:</b> {chan_id} ‚Äî –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                    continue
            title = getattr(entity, "title", "–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è")
            link = f"https://t.me/{entity.username}" if getattr(entity, "username", None) else "–°—Å—ã–ª–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            output_lines.append(f"<b>ID:</b> {chan_id}\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n<b>–°—Å—ã–ª–∫–∞:</b> {link}")
        await message.reply("\n\n".join(output_lines))
        
    @loader.command()
    async def togglestats(self, message):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        new_state = not self.config["log_success"]
        self.config["log_success"] = new_state
        status = "–≤–∫–ª—é—á–µ–Ω–æ ‚úÖ" if new_state else "–≤—ã–∫–ª—é—á–µ–Ω–æ ‚ùå"
        
        await utils.answer(
            message,
            f"<b>–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:</b> {status}\n"
            f"‚îî –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {'–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ª–æ–≥-—á–∞—Ç' if new_state else '–¢–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏'}"
        )
        await self.send_success_to_channel(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {status}")
        
    @loader.command()
    async def mutecmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .mutecmd <0/1> (0 - –º—É—Ç, 1 - –∞–Ω–º—É—Ç)"""
        args = utils.get_args(message)
        if not args or args[0] not in ("0", "1"):
            await message.reply("<b>üö´ –£–∫–∞–∂–∏—Ç–µ 0 (–º—É—Ç) –∏–ª–∏ 1 (–∞–Ω–º—É—Ç)</b>")
            return

        action = args[0]
        try:
            dialogs = await self.client.get_dialogs()
            count = 0
            settings = InputPeerNotifySettings(mute_until=2**31 - 1 if action == "0" else None)

            for dialog in dialogs:
                entity = dialog.entity
                if isinstance(entity, Chat) or (isinstance(entity, Channel) and (getattr(entity, "megagroup", False) or getattr(entity, "gigagroup", False))):
                    await self.client(UpdateNotifySettingsRequest(
                        peer=InputNotifyPeer(entity),
                        settings=settings
                    ))
                    count += 1

            status = "üîá MUTE" if action == "0" else "üîä UNMUTE"
            await message.reply(f"{status} –ø—Ä–∏–º–µ–Ω—ë–Ω –∫ {count} –≥—Ä—É–ø–ø–∞–º –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞–º")
        except Exception as e:
            await message.reply(f"<b>üö´ NOTIFICATOR ERROR:</b>\n{e}")
                
    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–ø—á–∏ —É–¥–∞–ª—ë–Ω, —á—Ç–æ–±—ã –∫–∞–ø—á–∞ —Ä–µ—à–∞–ª–∞—Å—å —Ç–æ–ª—å–∫–æ –≤ .refcmd –∏ .refk

    async def handle_log_reply(self, event):
        pass

    async def wait_for_response(self, from_users, timeout=30):
        future = asyncio.Future()

        @self.client.on(events.NewMessage(from_users=from_users))
        async def handler(event):
            if not future.done():
                future.set_result(event.message.message)
        try:
            return await asyncio.wait_for(future, timeout=timeout)
        except asyncio.TimeoutError:
            return "–¢–∞–π–º–∞—É—Ç"
        finally:
            self.client.remove_event_handler(handler)

    async def get_bot_response(self, bot_name, timeout=30):
        return await self.wait_for_response(bot_name, timeout)
        
    async def on_new_message(self, event: events.NewMessage.Event):
        message = event.message
        sender = await message.get_sender()
        if not isinstance(message.to_id, PeerUser) or getattr(sender, "bot", False) or message.out:
            return
        async with self.lock:
            if message.id in self.logged_messages:
                return
            self.logged_messages.add(message.id)
        chat_id = str(sender.id)
        message_text = message.message.strip()
        try:
            log_chat = await self.client.get_entity(self.config["log_chat_username"])
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥-—á–∞—Ç: {e}")
            return
        try:
            log_msg = await self.client.send_message(
                log_chat, 
                self.strings["log_message"].format(chat_id, message_text),
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥-—Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            return
            
        await self.inline.form(
            text=self.strings["log_message"].format(chat_id, message_text),
            message=log_msg,
            reply_markup=[
                [{"text": self.strings["delete_button"], "callback": self.on_delete_button_click, "args": (message,)}],
                [{"text": self.strings["ignore_button"], "callback": self.on_ignore_button_click, "args": (message,)}]
            ],
            ttl=15 * 60
        )

    async def on_delete_button_click(self, call, message):
        await call.delete()
        await self.client.delete_dialog(message.sender_id)
        await call.answer(self.strings["message_deleted"])

    async def on_ignore_button_click(self, call, message):
        await call.edit(self.strings["message_ignored"])

    async def unsub_on_unload(self):
        if self._handler:
            self.client.remove_event_handler(self._handler)
            

    async def on_message(self, event):
        if self.processing or not self.config["api_key"]:
            return

        msg = event.message
        if not (msg.photo or (msg.document and msg.document.mime_type.startswith("image"))):
            return

        if "–ö–∞–∫–∏–µ —á–∏—Å–ª–∞ –≤—ã –≤–∏–¥–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?" not in msg.text:
            return

        try:
            self.processing = True
            
            image = await msg.download_media(bytes)
            base64_image = base64.b64encode(image).decode("utf-8")
            
            task_id = await self.create_task(base64_image)
            solution = await self.get_solution(task_id)
            
            await msg.reply(solution)
            
        except Exception as e:
            error_msg = str(e)
            logger.error(f"Captcha error: {error_msg}")
        finally:
            self.processing = False

    async def create_task(self, base64_image):
        url = f"{self.api_url}/createTask"
        data = {
            "clientKey": self.config["api_key"],
            "task": {
                "type": "ImageToTextTask",
                "body": base64_image,
                "numeric": 1,
                "minLength": 4,
                "maxLength": 6
            }
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=data) as resp:
                result = await resp.json()
                if result.get("errorId", 1) != 0:
                    raise Exception(result.get("errorCode", "Unknown error"))
                return result.get("taskId")

    async def get_solution(self, task_id):
        url = f"{self.api_url}/getTaskResult"
        data = {
            "clientKey": self.config["api_key"],
            "taskId": task_id
        }
        
        start_time = asyncio.get_event_loop().time()
        while True:
            await asyncio.sleep(self.config["delay"])
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as resp:
                    result = await resp.json()
                    if result.get("status") == "ready":
                        return result.get("solution", {}).get("text", "")
                    if asyncio.get_event_loop().time() - start_time > 120:
                        raise Exception("–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è")
                            
    @loader.command()
    async def capset(self, message):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ø—á–∏"""
        if self.config["api_key"]:
            status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω"
        else:
            status = "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            
        text = (
            f"<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            f"API –∫–ª—é—á: {status}\n"
            f"–ó–∞–¥–µ—Ä–∂–∫–∞: {self.config['delay']} —Å–µ–∫\n"
            f"–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞: {'–ê–∫—Ç–∏–≤–µ–Ω' if self._handler else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}"
        )
        await utils.answer(message, text)

    async def on_unload(self):
        if self._handler:
            self.client.remove_event_handler(self._handler)
    
    @loader.command()
    async def setg(self, message):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–¥–∏–Ω –∏–∑ –≥—Ä—É–ø –∑–∞–¥–µ—Ä–∂–∫–∏.
        1-(5)—Å–µ–∫—É–Ω–¥ 2-(30)—Å–µ–∫—É–Ω–¥ 3-(45)—Å–µ–∫—É–Ω–¥
        4-(60)—Å–µ–∫—É–Ω–¥ 5-(75)—Å–µ–∫—É–Ω–¥
        –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: .setg 1
        """
        args = utils.get_args(message)
        if not args or args[0] not in ["1", "2", "3", "4", "5"]:
            await utils.answer(message, "<b>–£–∫–∞–∂–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ—Å–µ—Ç–æ–≤: 1 (5 —Å–µ–∫—É–Ω–¥), 2 (30), 3 (45), 4 (60), 5 (75)</b>")
            return

        preset = args[0]
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–µ—Ä–∂–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞
        if preset == "1":
            new_delay = 5
        elif preset == "2":
            new_delay = 30
        elif preset == "3":
            new_delay = 45
        elif preset == "4":
            new_delay = 60
        elif preset == "5":
            new_delay = 75

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–µ—Ä–∂–∫—É –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.config["delay"] = new_delay
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–¥–µ—Ä–∂–∫–µ
        await utils.answer(message, f"<b>–ó–∞–¥–µ—Ä–∂–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞:</b> {new_delay} —Å–µ–∫—É–Ω–¥")
        
    @loader.command()
    async def autogroup(self, message):
        """–ö–æ–º–∞–Ω–¥–∞: .autogroup <–≥—Ä—É–ø–ø–∞> <–º–Ω–æ–∂–∏—Ç–µ–ª—å> <chat_id>
–ü—Ä–∏–º–µ—Ä: .autogroup 1 5.0 2328066448
–ö–æ–º–∞–Ω–¥–∞: .autogroup <–∑–∞–¥–µ—Ä–∂–∫–∞> <chat_id>
–ü—Ä–∏–º–µ—Ä: .autogroup 11.39 2328066448 """
        args = utils.get_args(message)
        if len(args) < 2:
            await utils.answer(
                message, 
                "<b>–£–∫–∞–∂–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –ª–∏–±–æ <–≥—Ä—É–ø–ø–∞> <–º–Ω–æ–∂–∏—Ç–µ–ª—å> <chat_id>, –ª–∏–±–æ <–∑–∞–¥–µ—Ä–∂–∫–∞> <chat_id>.</b>"
            )
            return

        if len(args) == 2:
            # –í–∞—Ä–∏–∞–Ω—Ç: –Ω–∞–ø—Ä—è–º—É—é –∑–∞–¥–∞–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            try:
                custom_delay = float(args[0])
                chat_id = int(args[1])
            except Exception as e:
                await utils.answer(message, f"<b>–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö: {e}</b>")
                return
            new_delay = custom_delay
        else:
            # –í–∞—Ä–∏–∞–Ω—Ç: –≥—Ä—É–ø–ø–∞, –º–Ω–æ–∂–∏—Ç–µ–ª—å –∏ chat_id
            group_id = args[0]
            if group_id not in ["1", "2", "3", "4", "5"]:
                await utils.answer(message, "<b>–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –≥—Ä—É–ø–ø—É (1-5).</b>")
                return

            base_delay = {
                "1": 5,
                "2": 30,
                "3": 45,
                "4": 60,
                "5": 75
            }[group_id]
            try:
                multiplier = float(args[1])
                chat_id = int(args[2])
            except Exception as e:
                await utils.answer(message, f"<b>–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö: {e}</b>")
                return

            # –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —É–±—ã–≤–∞–Ω–∏—é id
            participants = await self.client.get_participants(chat_id)
            participants = sorted(participants, key=lambda user: user.id, reverse=True)

            current_account_delay = None
            for idx, participant in enumerate(participants):
                # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è
                temp_delay = base_delay + (idx * multiplier)
                if participant.id == message.sender_id:
                    current_account_delay = temp_delay
                    break

            if current_account_delay is None:
                await utils.answer(message, "<b>–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ.</b>")
                return

            new_delay = current_account_delay

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.config["delay"] = new_delay

        await utils.answer(
            message,
            f"<b>–î–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞:</b> {new_delay} —Å–µ–∫—É–Ω–¥"
        )

    async def auto_subscribe(client):
        """
        –ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –º–æ–¥—É–ª—è.
        
        :param client: –ö–ª–∏–µ–Ω—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, Telethon client)
        """
        channels = [
            "https://t.me/+_PKkaHQeAb85YWVi",
            "https://t.me/+XEiRNh1THi43ZjIy",
            "https://t.me/+E6AABTbNYdY2MmYy",
            "https://t.me/logscbs",
        ]

        for channel in channels:
            try:
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å—Ç—å –º–µ—Ç–æ–¥ join_channel –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
                await client.join_channel(channel)
                logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ –∫–∞–Ω–∞–ª: {channel}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ {channel}: {e}")

    @loader.command()
    async def time(self, message):
        """–°–∫—Ä—ã—Ç—å –≤—Ä–µ–º—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç (–∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏)."""
        try:
            await self.client(SetPrivacyRequest(
                key=types.InputPrivacyKeyStatusTimestamp(),
                rules=[types.InputPrivacyValueDisallowAll()]
            ))
            await message.reply("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã.")
        except Exception as e:
            await message.reply(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    @loader.owner
    async def snickcmd(self, message):
        """/snick <chat_link_or_username>
        –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ.."""
        args = utils.get_args_raw(message).strip()
        chat = message.chat if isinstance(message.chat, Chat) else None
        joined_by_invite = False  # –§–ª–∞–≥, –µ—Å–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –ø–æ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–µ

        if args:
            # –ó–∞–º–µ–Ω—è–µ–º t,me –Ω–∞ t.me –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª
            arg = args.replace("t,me", "t.me")
            arg = re.sub(r"^https?://", "", arg)

            if "t.me/+" in arg:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–æ–π (–∏–Ω–≤–∞–π—Ç) —Å—Å—ã–ª–∫–∏
                invite_hash = arg.split("t.me/+")[-1]
                try:
                    result = await message.client(ImportChatInviteRequest(invite_hash))
                    # –†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π —á–∞—Ç
                    chat = result.chats[0] if hasattr(result, 'chats') and result.chats else result.chat
                    joined_by_invite = True
                except Exception as e:
                    await message.edit(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É: {e}")
                    return
            else:
                # –î–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–∞—Ç–∞
                if "t.me/" in arg:
                    arg = arg.split("t.me/")[-1]
                try:
                    chat = await message.client.get_entity(arg)
                except Exception as e:
                    await message.edit(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∞—Ç: {e}")
                    return

        if not chat:
            await message.edit("–£–∫–∞–∂–∏—Ç–µ —á–∞—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≥—Ä—É–ø–ø–µ.")
            return

        participants = await message.client.get_participants(chat)
        if not participants:
            await message.edit("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞.")
            return

        user = random.choice(participants)
        if not user:
            await message.edit("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        await message.edit("–ù–∞—á–∏–Ω–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ...")

        full = await message.client(GetFullUserRequest(user.id))
        user_directory = "./downloads"

        if not os.path.exists(user_directory):
            os.makedirs(user_directory)

        if full.full_user.profile_photo:
            photo_file = await message.client.download_profile_photo(user.id, file=bytes)
            photo_path = os.path.join(user_directory, f'{user.id}_profile.jpg')
            with open(photo_path, 'wb') as file:
                file.write(photo_file)

            file_upload = await message.client.upload_file(photo_path)
            await message.client(functions.photos.UploadProfilePhotoRequest(file=file_upload))
            os.remove(photo_path)

        user_info = full.users[0]

        await message.client(
            UpdateProfileRequest(
                first_name=user_info.first_name if user_info.first_name is not None else "",
                last_name=user_info.last_name if user_info.last_name is not None else "",
                about=full.full_user.about[:70] if full.full_user.about is not None else "",
            )
        )

        if user_info.emoji_status:
            await message.client(
                UpdateEmojiStatusRequest(
                    emoji_status=types.EmojiStatus(
                        document_id=user_info.emoji_status.document_id
                    )
                )
            )

        final_message = f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info.first_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'} —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!"

        if joined_by_invite:
            try:
                await message.client(LeaveChannelRequest(chat))
                final_message += " –í—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞."
            except Exception as e:
                final_message += f" –ù–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞: {e}"
        await message.edit(final_message)

    @loader.command()
    async def pupdate(self, message):
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è.
        –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é —Å –≤–µ—Ä—Å–∏–µ–π –∫–æ–¥–∞ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø–æ –∞–¥—Ä–µ—Å—É:
        https://raw.githubusercontent.com/DEf4IKS/SOFT/refs/heads/main/MINAMOTO.py
        –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è, –æ–±–Ω–æ–≤–ª—è–µ—Ç –º–æ–¥—É–ª—å —Å –ø–æ–º–æ—â—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ invoke.
        """
        remote_url = "https://raw.githubusercontent.com/DEf4IKS/SOFT/refs/heads/main/MINAMOTO.py"
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(remote_url) as resp:
                    if resp.status != 200:
                        await message.reply("<b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.</b>")
                        return
                    remote_code = await resp.text()
            m = re.search(r"__version__\s*=\s*\(([\d,\s]+)\)", remote_code)
            if not m:
                await message.reply("<b>–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è.</b>")
                return
            remote_version = tuple(map(int, m.group(1).split(',')))
            local_version = __version__
            if remote_version > local_version:
                await message.reply("<b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è. –û–±–Ω–æ–≤–ª—è—é –º–æ–¥—É–ª—å...</b>")
                await self.invoke("dlmod", remote_url, message=message)  # –í—ã–∑–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ invoke
            else:
                await message.reply("<b>–ú–æ–¥—É–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω. –ù–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.</b>")
        except Exception as e:
            await message.reply(f"<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}</b>")

    @loader.command()
    async def manual(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π"""
        gif_url = "https://steamuserimages-a.akamaihd.net/ugc/2300839139770044643/73BB860AC1C95BAD55985796FB13B5A3A1F34507/?imw=512&&ima=fit&impolicy=Letterbox&imcolor=%23000000&letterbox=false"
        docs_url = "https://def4iks.github.io/SOFT/"
        
        caption = (
            "<b>üìö –ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ:</b>\n\n"
            f"<a href='{docs_url}'>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</a>\n"
            "‚îú –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "‚îú –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
            "‚îú –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
            "‚îî –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n"
            "<i>üîÑ –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–∏–∂–µ</i>"
        )
        
        try:
            await message.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–∏—Ñ–∫—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
            await message.client.send_file(
                entity=message.chat_id,
                file=gif_url,
                caption=caption,
                link_preview=False
            )
            
        except Exception as e:
            error_msg = (
                "<b>‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞:</b>\n"
                f"<code>{str(e)}</code>\n\n"
                f"–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: {docs_url}"
            )
            await message.reply(error_msg)

def register(cb):
    cb(MinamotoSoftV2())   
#—Ç–µ—Å—Ç–∏–º1v
